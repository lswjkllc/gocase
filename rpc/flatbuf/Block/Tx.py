# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Block

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Tx(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTx(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Tx()
        x.Init(buf, n + offset)
        return x

    # Tx
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Tx
    def Hash(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Tx
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def TxStart(builder): builder.StartObject(2)
def TxAddHash(builder, hash): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(hash), 0)
def TxAddValue(builder, value): builder.PrependFloat64Slot(1, value, 0.0)
def TxEnd(builder): return builder.EndObject()
