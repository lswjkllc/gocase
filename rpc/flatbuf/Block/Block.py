# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Block

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Block(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsBlock(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Block()
        x.Init(buf, n + offset)
        return x

    # Block
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Block
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # Block
    def Hash(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Block
    def Flag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Block
    def Txs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Block.Tx import Tx
            obj = Tx()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Block
    def TxsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Block
    def TxsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def BlockStart(builder): builder.StartObject(4)
def BlockAddId(builder, id): builder.PrependInt64Slot(0, id, 0)
def BlockAddHash(builder, hash): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(hash), 0)
def BlockAddFlag(builder, flag): builder.PrependBoolSlot(2, flag, 0)
def BlockAddTxs(builder, txs): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(txs), 0)
def BlockStartTxsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def BlockEnd(builder): return builder.EndObject()
